Q. Find two missing number from n natural number , given array of unique n-2 numbers.

M1 : Extra space auxillary array[n] , linear traverse and mark the presence in aux[]. Second traversal gives missing one.

M2 : Overflow method :

      arrSum => Sum of all elements in the array

      sum (Sum of 2 missing numbers) = (Sum of integers from 1 to n) - arrSum
                                     = ((n)*(n+1))/2 – arrSum 

      avg (Average of 2 missing numbers) = sum / 2;
      One of the numbers will be less than or equal to avg while the other one will be strictly greater then avg.
      Two numbers can never be equal since all the given numbers are distinct.We can find the first missing number
      as sum of natural numbers from 1 to avg, i.e., avg*(avg+1)/2 minus the sum of array elements smaller than avg
      We can find the second missing number as sum of natural numbers from avg+1 to n minus the sum of array elements
      greater than than avg
      
      
      
M3 : O(n) Xor Method

Below are steps.

Find XOR of all array elements and natural numbers from 1 to n. Let the array be arr[] = {1, 3, 5, 6}
   XOR = (1 ^ 3  ^ 5 ^ 6) ^ (1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6)
As per the property of XOR, same elements will cancel out and we will be left with 2 XOR 4 = 6 (110).
But we don’t know the exact numbers,let them be X and Y.
A bit is set in xor only if corresponding bits in X and Y are different. This is the crucial step to understand.
We take a set bit in XOR. Let us consider the rightmost set bit in XOR, set_bit_no = 010

Now again if we XOR all the elements of arr[] and 1 to n that have rightmost bit set we will get one of the repeating numbers, say x.
Ex: Elements in arr[] with bit set: {3, 6}
Elements from 1 to n with bit set {2, 3, 6}
Result of XOR'ing all these is x = 2.

Similarly, if we XOR all the elements of arr[] and 1 to n that have rightmost bit not set, we will get the other element, say y.
Ex: Elements in arr[] with bit not set: {1, 5}
Elements from 1 to n with bit not set {1, 4, 5}
Result of XOR'ing all these is y = 4

void findTwoMissingNumbers(int arr[],int n) 
{ 
    // Sum of 2 Missing Numbers 
    int sum = (n*(n + 1)) /2 - getSum(arr, n-2); 
  
    // Find average of two elements 
    int avg = (sum / 2); 
  
    // Find sum of elements smaller than average (avg) 
    // and sum of elements greater than average (avg) 
    int sumSmallerHalf = 0, sumGreaterHalf = 0; 
    for (int i = 0; i < n-2; i++) 
    { 
        if (arr[i] <= avg) 
            sumSmallerHalf += arr[i]; 
        else
            sumGreaterHalf += arr[i]; 
    } 
  
    cout << "Two Missing Numbers are\n"; 
  
    // The first (smaller) element = (sum of natural 
    // numbers upto avg) - (sum of array elements 
    // smaller than or equal to avg) 
    int totalSmallerHalf = (avg*(avg + 1)) / 2; 
    cout << (totalSmallerHalf - sumSmallerHalf) << " "; 
  
    // The first (smaller) element = (sum of natural 
    // numbers from avg+1 to n) - (sum of array elements 
    // greater than avg) 
    cout << (((n*(n+1))/2 - totalSmallerHalf) - 
             sumGreaterHalf); 
} 
