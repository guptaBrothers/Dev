Operations:
1. Two's complement - found by (-n)
2. Xor operation - to find different (m^n)
3. left/Right shift operator - to generate power of 2 numbers, shift number binary digits = divide/multiple by 2. (1 << (k-1))
4. AND/OR (& / |)
5. log - Math.log10(n)/ Math.log10(2)




Questions:
1. Find rightmost set bit of a number.
    Steps:
    > Find two's complement (Ex: 13 -> 3, 12 -> 4) = m
    >  (int) Math.log10(n^m)/ Math.log10(2) + 1;

2. Find rightmost different bit.
    > calculate m^N
    > find rightmost set bit (problem 1)
3. Check kth bit set or not
    > Left Shift 1 by k times and do AND - if result ==0  then set 
    
4. Find max consecutive set bits
    > Naive - save binary form and iterate to find max length of consecutive 1's
    > Shift + AND - x = (x & (x << 1)) till x is zero. Number of operations = required.
5. Non repeating number from repeating numbers
    > Use XOR operation - XOR of all elements in list will return non-repeating number.
    

https://www.geeksforgeeks.org/bits-manipulation-important-tactics/?ref=leftbar-rightbar
